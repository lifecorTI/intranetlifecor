// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  isAdmin    Boolean
  password   String
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @default(now())
  Patient    Patient[]
  Sales      Sales[]
  Procedures Procedures[]
}

model Patient {
  id           String   @id @default(uuid())
  name         String
  birthDate    DateTime
  phone        String?
  sex          String
  cpf          String?  @unique
  rg           String?
  address      String?
  houseNumber  Int?
  district     String?
  agreement    String
  city         String
  municipality String
  motherName   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  User       User         @relation(fields: [userId], references: [id])
  userId     String
  Sales      Sales[]
  Procedures Procedures[]
}

model Procedures {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  origin    String

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  doctorId  String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  sales     Sales[]
}

model Doctor {
  id             String       @id @default(uuid())
  name           String
  specialization String
  location       String
  procedures     Procedures[]
}

model Provider {
  id        String    @id @default(uuid())
  name      String
  email     String
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Category {
  id      String    @id @default(uuid())
  name    String
  product Product[]
}

model Product {
  id         String  @id @default(uuid())
  name       String
  ref        String
  length     String?
  price      Float
  pricePt    Float
  isCosigned Boolean

  provider     Provider?      @relation(fields: [providerId], references: [id])
  providerId   String?
  category     Category?      @relation(fields: [categoryId], references: [id])
  categoryId   String?
  productSales ProductSales[]
  lot          Lot[]
}

model Lot {
  id        String   @id @default(uuid())
  name      String
  dueDate   DateTime
  qtd       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product      Product        @relation(fields: [productId], references: [id])
  productId    String
  productSales ProductSales[]
}

model Sales {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id])
  userId       String
  patient      Patient        @relation(fields: [patientId], references: [id])
  patientId    String
  procedures   Procedures     @relation(fields: [proceduresId], references: [id])
  proceduresId String
  productSales ProductSales[]
}

model ProductSales {
  id  String @id @default(uuid())
  qtd Int

  product   Product @relation(fields: [productId], references: [id])
  productId String
  sales     Sales   @relation(fields: [salesId], references: [id])
  salesId   String
  lot       Lot     @relation(fields: [lotId], references: [id])
  lotId     String
}
